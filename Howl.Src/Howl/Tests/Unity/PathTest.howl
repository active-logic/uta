⊐ InvOp = System.InvalidOperationException;
⊐ NUnit.Framework;
⊐ Active.Howl;

⊓ Unit{
‒ ○ PathTest : TestBase{

    ؟ DefaultHowlRootPath()
    → o( Path.defaultHowlRootPath, "Assets/Howl.Howl/");

    // TODO move to IO test
    ؟ DirName() → o( "Foo/Bar/Pkg/Test.cs".DirName(), "Foo/Bar/Pkg");

    ؟ InPath(){
        ∙ ㄸ = "Assets/Pkg/Test.cs".InPath();
        o(ㄸ, $"{Path.howlRoot}Pkg/Test.howl");
    }

    ؟ InPath_Dir
    ⎚ o( "Assets/Pkg/".InPath(), $"{Path.howlRoot}Pkg/" );

    ؟ InPath_Dir1
    ⎚ o( "Assets/Pkg".InPath(), $"{Path.howlRoot}Pkg" );

    ؟ InPath_Corrected(){
        ∙ ㄸ = "Foobar/Assets/Pkg/Test.cs".InPath();
        o(ㄸ, $"{Path.howlRoot}Pkg/Test.howl");
    }

    ؟ InPath_BadInput(){
        ಠᴗಠ<InvOp>(() → {
            "Foo/Bar/Pkg/Test.cs".InPath();
        });
    }

    ؟ IsHowlSource_File(){
        ∙ π = $"{Path.howlRoot}Test.howl";
        o(π.IsHowlSource(), ✓);
        o(π.FullPath().IsHowlSource(), ✓);
    }

    ؟ IsHowlSource_Dir(){
        ∙ π = $"{Path.howlRoot}Pkg/Dir";
        o(π.IsHowlSource(), ✓);
        o(π.FullPath().IsHowlSource(), ✓);
    }

    ؟ Nix() → o("Assets\\Howl".Nix(), "Assets/Howl");

    ؟ NoFinalSep([Values("Foo/", "Foo")] ㄹ x)
    → o( x.NoFinalSep() , "Foo");

    ؟ NoFinalSep_BS()
    → o( ("Foo" + '\\').NoFinalSep() , "Foo");

    ؟ OutPath_1()
    → o($"{Path.howlRoot}x.howl".OutPath(),
         "Assets/x.cs");

    ؟ OutPath_2()
    → o($"{Path.howlRoot}Runtime/x.howl".OutPath(),
         "Assets/Runtime/x.cs");

    ؟ OutPath_3(){
        var ㅂ = "Assets/Howl/Howl.Src/x.howl".FullPath();
        var ㄸ = ㅂ.OutPath();
        o(ㄸ, "Assets/x.cs");
    }

    ؟ OutPath_Dir
    ⎚ o( $"{Path.howlRoot}Pkg/".OutPath(), "Assets/Pkg/" );

    ؟ OutPath_Dir1
    ⎚ o( $"{Path.howlRoot}Pkg".OutPath(), "Assets/Pkg" );

    ؟ OutPath_BadExtension()
    → ಠᴗಠ<InvOp>( () → "x.foo".OutPath() );

    ؟ OutPath_BadRoot()
    → ಠᴗಠ<InvOp>( () → "Fakeroot/x.howl".OutPath() );

    ؟ HowlRoot() → o( Path.howlRoot, "Assets/Howl/Howl.Src/" );

    ؟ ProjectName() → o(Path.projectName, "Howl");

}}
