⊐ System; ⊐ System.IO; ⊐ Ex = System.Exception;
⊐ System.Collections.Generic; ⊐ System.Linq;
⊐ UnityEngine;

⊓ Active.Howl{
‒̥ ○ FileSystem{

    ‒̥ ㄹ FindInParent(ㄹ root, ㄹ pattern)
    → DoFindInParent(⌢ DirectoryInfo(root), pattern);

    ‒̥ ㅇ HasFileOfType(ㄹ root, ㄹ pattern)
    → FindAny(⌢ DirectoryInfo(root), pattern);

    ‒̥ 𝕃<ㄹ> Paths(ㄹ root, ㄹ pattern){
        ∙ ㄸ = ⌢ 𝕃<ㄹ>();
        Traverse(⌢ DirectoryInfo(root), pattern, ㄸ);
        ⮐ ㄸ;
    }

    ‒̥ ㄹ Path(ㄹ root, ㄹ pattern){
        ∙ ㄸ = Paths(root, pattern);
        ⤴(ㄸ⁝ > 1) (╯°□°)╯ ⌢ Ex($"Only zero or one '{pattern}'");
        ⮐ ㄸ⁝ ☰ 0 ? ∅ : ㄸ[0];
    }

    ∘ ┈ Traverse(DirectoryInfo dir, ㄹ pattern, 𝕃<ㄹ> ㄸ){
        ↯{
            ㄸ.AddRange(‖ f ∈ dir.GetFiles(pattern)
                        ፥ f.FullName.Nix());
        }
        ⇤ (UnauthorizedAccessException e){ Warn(e.Message); }
        ⇤ (DirectoryNotFoundException  e){ Warn(e.Message); }
        ∀ (∙ x ∈ dir.GetDirectories())
            Traverse(x, pattern, ㄸ);
    }

    ∘ ㄹ DoFindInParent(DirectoryInfo dir, ㄹ pattern){
        ↯ {
            ∙ files = dir.GetFiles(pattern);
            ∙ dirs = dir.GetDirectories(pattern);
            ⤴(files❙ > 0) ⮐ files [0]🝠;
            ⤴(dirs❙  > 0) ⮐ dirs  [0]🝠;
        }
        ⇤ (UnauthorizedAccessException) {}
        ⇤ (DirectoryNotFoundException)  {}
        ∙ π = dir.Parent; ⮐ π ≠ ∅ ? DoFindInParent(π, pattern) : ∅;
    }

    ∘ ㅇ FindAny(DirectoryInfo dir, ㄹ pattern){
        ↯ {
            ⤴(dir.GetFiles(pattern)❙ > 0) ⮐ ✓;
        }
        ⇤ (UnauthorizedAccessException) {}
        ⇤ (DirectoryNotFoundException)  {}
        ∀ (∙ x ∈ dir.GetDirectories())
            ⤴(FindAny(x, pattern)) ⮐ ✓;
        ⮐ ✗;
    }

    ∘ ┈ Warn(ㄹ x) → Debug.LogWarning(x);

}}
