⊐ FS = Active.Howl.FileSystem;

⊓ Active.Howl{
‒ ○ OnboardingReqs : IOnboardingReqs{

    ‒ ㅇ inProgress;
    ‒ STC<ㅇ> ready;

    ‒ OnboardingReqs(){
        ready = ⌢ STC<ㅇ>( φ: ⎚ HasIDE() ∧ HasExt() ∧ HasRoot()
                              ∧ HasVCS() ∧ !mayImport,
                           expiry: 5f);
    }

    ‒ ㅇ ReadyForUse ⎚ ready.@value;

    // <IOnboardingReqs> --------------------------------------------

    ‒ ㅇ  InProgress   ⎚  inProgress ∨ (inProgress = !ReadyForUse());
    ‒ ㅇ  HasIDE       ⎚  atom.Exists() ∨ vscode.Exists();
    ‒ ㅇ  HasExt       ⎚  atom.SupportsHowl() ∨ vscode.SupportsHowl();
    ‒ ㅇ  HasRoot      ⎚  Path.FindHowlRoot() ≠ ∅;
    ‒ ㅇ  HasVCS       ⎚  FS.FindInParent(Path.howlRoot, ".git") ≠ ∅;
    ‒ ㅇ  HereBeHowls  ⎚  FS.HasFileOfType("Assets/", "*.howl");
    ‒ ㅇ  HereBeSharps ⎚  FS.HasFileOfType("Assets/", "*.cs");
    //
    ‒ UserChoice LetsImport ⎚ Config.ι.sel_importFiles;

    ‒ ┈ MakeRoot ⎚ Path.AvailHowlRoot();

    ‒ ┈ DoImport(){
        Howl.ImportDir("Assets/", verbose: ✓);
        Config.ι.sel_importFiles = UserChoice.Yes;
    }

    ‒ ┈ DoNotImport ⎚ Config.ι.sel_importFiles = UserChoice.No;

    ‒ ┈ Validate ⎚ inProgress = ✗;

    // --------------------------------------------------------------

    ㅇ mayImport → (LetsImport() ☰ UserChoice.Undecided)
                   ∧ HereBeSharps() ∧ !HereBeHowls();

    Atom   atom   → ⌢ Atom();

    VSCode vscode → ⌢ VSCode();

}}
