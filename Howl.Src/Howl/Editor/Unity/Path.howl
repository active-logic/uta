⊐ Env = System.Environment; ⊐ SysPath = System.IO.Path;
⊐ InvOp = System.InvalidOperationException;
⊐ UnityEngine;

⊓ Active.Howl{
‒̥ ○ Path{

    ᴸ ㄹ ROOT_TOKEN = "howl.root";  ‒̥ ㄹ _Howl = ".howl", _Cs = ".cs";

    // --------------------------------------------------------------

    ‒̥ ┈ AvailHowlRoot(){
        ∙ ρ = GetHowlRoot ();
        ⤴ (ρ.didCreate) Debug.Log($"Created Howl root: {ρ.path}");
    }

    ‒̥ ㄹ Expand(⦿ ㄹ path) → path
    .Replace("~",
        Env.GetFolderPath(Env.SpecialFolder.UserProfile))
    .Replace("%APPDATA%",
        Env.GetFolderPath(Env.SpecialFolder.ApplicationData))
    .Nix();

    ‒̥ ㄹ FullPath(⦿ ㄹ π) → SysPath.GetFullPath(π).Nix();

    ‒̥ ㄹ FindHowlRoot(){
        ㄹ root = FileSystem.Path("Assets/", ROOT_TOKEN);
        ⤴ (root ☰ ∅) ⮐ ∅;
        ⤵ {
            // TODO don't want a sep at end but noticed too late.
            ∙ dir = root.DirName() + "/";
            ᆞ i = dir.IndexOf("Assets/");
            ⮐ dir.Substring(i);
        }
    }

    ‒̥ ㅇ IsPackaged(⦿ ㄹ π) → π.StartsWith("Packages/");

    ‒̥ ㅇ IsDetachedHowlSource(⦿ ㄹ π) → π.EndsWith(_Howl);

    ‒̥ ㅇ IsHowlSource(⦿ ㄹ π)
    → π.FullPath().StartsWith(howlRoot.FullPath());

    ‒̥ ㅇ IsCSharpSource(⦿ ㄹ π) → π.EndsWith(".cs");

    ‒̥ ㄹ Nix(⦿ ㄹ x) → x.Replace('\\', '/');

    ‒̥ ㄹ NoFinalSep(⦿ ㄹ π)
    → (π = π.Nix()).EndsWith("/") ? π.Substring (0, π❙ - 1) : π;

    // Given path to a howl, return matching C# path
    ‒̥ ㄹ OutPath(⦿ ㄹ ㅂ){
        ⤴ (!ㅂ.IsHowlSource())
            (╯°□°)╯ ⌢ InvOp($"{ㅂ} doesn't howl");
        var π     = ㅂ.FullPath();
        var @base = howlRoot.FullPath();
        if (!π.StartsWith(@base))
            throw new InvOp($"{ㅂ} not in howl path");
        π = π.Substring(@base❙);
        π = π.Substring(0, π❙ - 5);
        var ㄸ = $"Assets/{π}{_Cs}";
        //
        ∙ control = ㄸ.Replace("Assets", "");
        ∙ n = (ㄸ❙ - control❙)/"Assets"❙;
        ⤴ (n ≠ 1){
            Debug.LogError($"From inpath {ㅂ}");
            Debug.LogError($"Gen outpath {ㄸ}");
            (╯°□°)╯ ⌢ System.Exception(
                    "'Assets' appears {n} times in outpath");
        }
        ⮐ ㄸ;
   }

    // Given path to a C# file, return matching Howl path
    ‒̥ ㄹ InPath(⦿ ㄹ ㅂ){
        ⤴(!ㅂ.InAssets()){
            ∙ i = ㅂ.IndexOf("Assets");
            ⤴(i < 0) (╯°□°)╯ ⌢ InvOp($"{ㅂ} not in Assets/");
            ㅂ = ㅂ.Substring(i);
        }
        ∙ ㄸ = ㅂ.Substring("Assets/"❙).Replace(".cs", ".howl");
        ⮐ $"{howlRoot}{ㄸ}";
    }

    ‒̥ ㅇ InAssets(⦿ ㄹ path)
    → path.StartsWith("Assets/") ∨ path.StartsWith("Assets" + '\\');

    ‒̥ ㅇ InHowlPath(⦿ ㄹ π) → π.StartsWith(howlRoot);

    // Properties ---------------------------------------------------

    ‒̥ ㅇ howlRootExists → FindHowlRoot() ≠ ∅;

    ‒̥ ㄹ howlRoot → GetHowlRoot().path;

    ‒̥ ㄹ defaultHowlRootPath → $"Assets/{projectName}.Howl/";

    // NOTE: App.dataPath uses forward slashes, even on Windows
    ‒̥ ㄹ projectName{ ╭{
        ㄹ[] s = Application.dataPath.Split('/');
        ⮐ s[s❙ - 2];
    }}

    // PRIVATE ------------------------------------------------------

    ∘ (ㄹ path, ㅇ didCreate) GetHowlRoot(){
        ∙ root = FindHowlRoot();
        ⤴ (root ☰ ∅){
            root = defaultHowlRootPath;
            (root + ROOT_TOKEN).Write("ROOT", mkdir: ✓);
            ⮐  (root, ✓);
        } ⤵
            ⮐ (root, ✗);
    }

}}
