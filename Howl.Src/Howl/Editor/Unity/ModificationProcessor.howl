⊐ System.IO;
⊐ UnityEditor; ⊐ UnityEngine;
⊐ RemoveOpt = UnityEditor.RemoveAssetOptions;
⊐̥ UnityEditor.AssetMoveResult; ⊐̥ UnityEditor.AssetDeleteResult;

⊓ Active.Howl{
‒ ○ ModificationProcessor : UnityEditor.AssetModificationProcessor{

    ‒̥ ㅇ warnings = ✓;

    ∘ AssetDeleteResult OnWillDeleteAsset(ㄹ π, RemoveOpt opt){
        ⤴ (!Config.ι.allowExport) ⮐ DidNotDelete;
        ⤴ (π.IsHowlSource()) AssetDatabase.DeleteAsset(π.OutPath());
        ⤳ (π.IsHowlBound()){
            Err("Do not modify Howl-bound assets"); ⮐ FailedDelete;
        }
        ⮐ DidNotDelete;
    }

    ∘ AssetMoveResult OnWillMoveAsset(ㄹ src, ㄹ dst){
        Log($"Moving {src} ---> {dst}");
        ⤴ (!Config.ι.allowExport)  ⮐ DidNotMove;
        ⤴ (src.IsHowlSource())    ⮐ WillMoveHowlAsset(src, dst);
        ⤳ (src.IsHowlBound()){
            Err("Do not move Howl-bound assets");
            ⮐ FailedMove;
        } ⤳ (src.IsDetachedHowlSource() ∧ dst.IsHowlSource()){
            Howl.ImportFile(src, dst.OutPath());
        }
        ⮐ DidNotMove;
    }

    ∘ AssetMoveResult WillMoveHowlAsset(ㄹ src, ㄹ dst){
        ⤴(dst.IsHowlSource()){
            ㄹ x = src.OutPath(), y = dst.OutPath();
            ⤴(x.Exists()){
                AssetDatabase.MoveAsset(x, y);
            }⤵{
                Warn($"Moved orphaned Howl {src}");
            }
        }⤵{
            Warn("Moved a Howl outside the path");
            AssetDatabase.DeleteAsset(src.OutPath());
        }
        ⮐ DidNotMove;
    }

    ∘ ┈ Log(ㄹ x){ Debug.Log(x); }
    ∘ ┈ Warn(ㄹ x){ ⤴(warnings) Debug.LogWarning(x); }
    ∘ ┈ Err(ㄹ x){ Debug.LogError(x); }

}}
