⊐ System;
⊐ UnityEngine;
⊐ Obj = UnityEngine.Object;
⊐̥ That.GUI;

⊓ Active.Howl{
‒̥ ○ Onboarding{

    ‒ ∘ IOnboardingReqs reqs;

    ‒̥ ㅇ UI() → r.InProgress()
        ∧ Do(S.GetIDE      , r.HasIDE()  , URL.Atom             )
        ∧ Do(S.GetExtension, r.HasExt()  , URL.LanguageHowl     )
        ∧ Do(S.CreateRoot  , r.HasRoot() , S.MkRoot, r.MakeRoot )
        ∧ OptImportCsharpFiles()
        ∧ Do(S.SetupVCS    , r.HasVCS()  , URL.AboutVCS         )
        ∧ Do(S.AllDone     , S.Okay      , r.Validate           );
        //∧ Notice(S.AllDone , URL.OnlineDoc);

    ‒̥ ㅇ OptImportCsharpFiles()
    → r.HereBeHowls() ∨ !r.HereBeSharps() ? ✓
    : Choice(S.ImportFiles,
             r.LetsImport() ≠ UserChoice.Undecided,
             r.DoImport, r.DoNotImport);

    // Action with label, condition and button
    ‒̥ ㅇ Do(ㄹ label, ㅇ κ, ㄹ buttonLabel, ⒜ action) → Br() ∧
        H(Check(label, κ), κ ∨ B(buttonLabel, action)) ∧ κ;

    // Action with label and button
    ‒̥ ㅇ Do(ㄹ label, ㄹ buttonLabel, ⒜ action) → Br() ∧
        H(  P(label), flex, B(buttonLabel, action)  );

    // External action via URL
    ‒̥ ㅇ Do(ㄹ label, ㅇ κ, URL url) → Br() ∧
        H( Check(label, κ), κ ∨ A(url.label, url.@value) ) ∧ κ;

    // Yes/No choice
    ‒̥ ㅇ Choice(ㄹ label, ㅇ κ, ⒜ okay, ⒜ cancel) → Br() ∧ H(
        Check(label, κ),
        (κ ∨ B("Yes", okay)),
        (κ ∨ B("No" , cancel))
    ) ∧ κ;

    ‒̥ ㅇ Notice(ㄹ label, URL url)
    → Br() ∧ P(label);

    ∘ ㅇ Check(ㄹ label, ㅇ κ) → P(κ ? $"[✓] {label}" : label);

    ∘ IOnboardingReqs r → reqs ?? (reqs = ⌢ OnboardingReqs());

    // --------------------------------------------------------------

    ‒ ○ URL{

        ‒ ㄹ label, @value;

        ‒̥ URL Atom         = ⌢ URL("Get Atom", "https://atom.io");
        ‒̥ URL LanguageHowl = ⌢ URL("Get", "https://atom.io/packages/language-howl");
        ‒̥ URL AboutVCS     = ⌢ URL("What's that?", "https://github.com/active-logic/howl/blob/master/Documentation/User/About-VCS.md");
        ‒̥ URL OnlineDoc    = ⌢ URL("Read the docs", "https://github.com/active-logic/howl");

        ‒ URL(ㄹ label, ㄹ path){ ⦿.@value = path; ⦿.label = label; }

    }

    ∘ ○ S{

        ‒ᴸ ㄹ GetIDE       = "A supported IDE with well configured \nsnippets is required; Atom is recommended.";
        ‒ᴸ ㄹ GetExtension = "Language-Howl enables snippets and \nsyntax coloring in Atom";
        ‒̥  ㄹ CreateRoot   = $"*.howl sources files will be placed\nunder {Path.FindHowlRoot() ?? Path.defaultHowlRootPath}";
        ‒ᴸ ㄹ MkRoot       = "Make dir";
        ‒ᴸ ㄹ ImportFiles  = "Convert your C# scripts\nto Howl?\n(does not modify/delete any files)";
        ‒ᴸ ㄹ SetupVCS     = "Ensure your project is using version control\n(required during β)";
        ‒ᴸ ㄹ AllDone      = "All is well and good ~ ";
        ‒ᴸ ㄹ Okay         = "╰(*´︶`*)╯ OK!";

    }

}}
