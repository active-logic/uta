‚äêÃ• Active.Howl.Header;
‚äêÃ• Active.Howl.Body;
‚äêÃ• Active.Howl.Classifier;

‚äì Active.Howl{
‚Äí ·¥æ ‚óã Map{

    ‚ÄíÃ• Map @default = ‚å¢ Rep[]{

        // C# =======================================================

        // ----------------------------------------------------------
        H("Header")
        +
        k * ("‚äêÃ•", "using static" ),
        k * ("‚äê", "using"),
        // ----------------------------------------------------------
        H("Blocks")
        +
        c * ("‚äì", "namespace"),
        c * ("‚óã", "class"),
        c * ("‚óå", "interface"),
        c * ("‚äü", "struct"),
        // ----------------------------------------------------------
        H("Modifiers")
        +
        // Access
        m * ("‚Äí", "public"),
        m * ("‚ó†", "protected"),
        m * ("‚ïå", "internal"),
        m * ‚å¢ Rep("‚ïç", "protected internal", px: "pri"),
        m * ("‚ñ∞", "private"),
        //
        m * ‚å¢ Rep("‚ÄíÃ•", "public static", px: "ps"),
        m * ‚å¢ Rep("‚ó†Ã•", "protected static", px: "prs"),
        m * ‚å¢ Rep("‚ïåÃ•", "internal static", "‚äêÃ•", px: "is"),
        m * ‚å¢ Rep("‚ïçÃ•", "protected internal static", px: "pris"),
        m * ‚å¢ Rep("‚ñ∞Ã•", "private static", px: "pvs"),
        //
        // Common
        m * ("·¥¨", "abstract"),  // ‚òã
        m * ("·¥∏", "const"),
        m * ("‚Å∫", "override"),
        m * ("·¥æ", "partial"),
        m * ("‚àò", "static"),
        m * ("·µõ", "virtual"),
        // Uncommon
        // (Extern, Readonly, Unsafe, Volatile
        m * ("üîí", "sealed ", alt: "‚ñ°ÕÜ"),

        // ----------------------------------------------------------
        H("Control flow")
        +
        f * ("‚§¥", "if", alt: "‚Ü±"),    // ‚ëÄ
        f * ("‚§µ", "else", alt: "‚Ü≥"),  // ‚ëÅ
        f * ("‚§≥", "else if", alt: "‚Ü™", px: "elif"), // ‚ëÅ
        //
        f * ("‚àÄ", "foreach")  ,
        f * ‚å¢ Rep("‚àà", "in", œÄ: ‚úó),
        f * ("‚ü≥", "for", alt: "‚Üª"),
        f * ("‚ü≤", "while", alt: "‚Ü∫"),
        //
        f * ("‚§≠", "switch", alt: "X"),
        f * ("‚•∞", "case", alt: "Ôπ¶)"), // alt: "‚Ü†"),
        f * -(Rep)("¬¶", "break;", bridge: ‚úì),
        //
        x * ("‚Æê", "return"),
        // NOTE: MostHated aberrations; contribs. from Rettie and Tea
        f * ("‚ÜØ", "try"),
        f * ("‚á§", "catch"),
        f * ("(‚ïØ¬∞‚ñ°¬∞)‚ïØ", "throw"),
        //new Rep("(…îÀò–∑Àò)…î", "catch", name: "Got U",  px: "got"),
        //new Rep("(…î=3=)…î", "catch", name: "Gotcha", px: "gotcha"),
        //new Rep("(…î√≥w√≥)…î", "catch", name: "WTF!",   px: "wtf"),
        f * ("(Àô‚ñøÀô)"  , "finally"),
        // ----------------------------------------------------------
        H("Linq")
        +
        f * ("‚Äñ", "from", alt: "‚Äñ"),
        f * ("¬ø", "where", alt: "?"),
        f * ("·ç•", "select", alt: "‚Åù"),
        // ----------------------------------------------------------
        H("Operators")
        +
        o * ‚å¢ Rep("‚Üí", "=>", bridge: ‚úì, name: "As (=>)"),
        o * ‚å¢ Rep("‚ò∞", "==", bridge: ‚úì, name: "Eq"),
        o * ‚å¢ Rep("‚â†", "!=", bridge: ‚úì, name: "NEq"),
        o * ‚å¢ Rep("‚â•", ">=", bridge: ‚úì, name: "GEq"),
        o * ‚å¢ Rep("‚â§", "<=", bridge: ‚úì, name: "LEq"),
        o * ‚å¢ Rep("‚àß", "&&", bridge: ‚úì, name: "And"),
        o * ‚å¢ Rep("‚à®", "||", bridge: ‚úì, name: "Or"),
        // NOTE: sidelined pending discussion
        o * ‚å¢ Rep("‚©ú", "&&", alt: "‚àßÃ∂", ns: ‚úì),
        o * ‚å¢ Rep("‚©ù", "||", alt: "‚à®Ã∂", ns: ‚úì),
        //
        k * ("‚®ï", "operator", alt: "/Ãµ"),
        k * ("·µâ", "explicit"),
        k * ("‚Å±", "implicit"),
        // ----------------------------------------------------------
        H("Primitives")
        +
        p * -‚å¢ Rep("„Öá", "bool",   Œπ: ‚úì),  // ‚ñ¢ // ‚ó©, , ‚ó´,
        p * -‚å¢ Rep("„ÖÖ", "float",  Œπ: ‚úì),  // ‚äì // ‚äì, ‚¶ú, ‚åó
        p * -‚å¢ Rep("·Üû", "int",    Œπ: ‚úì),  // ·ç¢ // ‚ñ´, ‚ñ™,  Ãª)
        p * -‚å¢ Rep("„Ñπ", "string", Œπ: ‚úì),  // ‚åû // ‚éÖ ‚äù ‡¨Ω ‚¶¢
        //-new Rep("‚©è", "double"), Œπ: true), ‚äî

        // ----------------------------------------------------------
        H("Keywords")
        +
        k * ‚å¢ Rep("‚ï≠", "get", px: "get") * B("‚ï≠{ $0 }"),
        k * ‚å¢ Rep("‚ï∞", "set", px: "set") * B("‚ï∞{ $0 }"),
        s * -(Rep)("‚úì", "true"),   // ‚ä®
        s * -(Rep)("‚úó", "false"),  // ‚ä≠
        k * ("‚å¢", "new"),
        k * ("‚àô", "var"),
        s * -(Rep)("‚àÖ", "null"),
        k * -(Rep)("‚¶ø", "this", "‚Ä¢ÃÅ"),
        ("‚îà", "void"),
        // ----------------------------------------------------------
        H("Identifiers")
        +
        p * -‚å¢ Rep("‚íú", "Action", name: "Action<>"),
        p * -‚å¢ Rep("‚í°", "Func", name: "Func<>") * B("‚í°<${0:R}>"),
        p * -(Rep)("ùïÑ", "Dictionary", alt: "D"),  // ‚∫µ
        p * -(Rep)("ùïä", "HashSet", alt: "M"),
        p * -(Rep)("ùïÉ", "List", alt: "L"),
        -(Rep)("¬±", "Append", "¬±"),
        -(Rep)("‚àã", "Contains"),
        -(Rep)("‚ã∫", "ContainsKey", "‚àãÃ∂"),
        //-(Rep)("∆™", "Validate"),
        -(Rep)("‚ßï", "that", alt: "‚óÅ"),
        // ----------------------------------------------------------
        H("Idioms")
        +
        o * ‚å¢ Rep("‚éö", "() =>", alt:"-", œÄ: ‚úó, name: "Do"),
        o * -(Rep)("‚Åù", ".Count"),
        o * -(Rep)("‚ùô", ".Length"),
        o * -(Rep)("üù†", ".ToString()", alt:"-"),  // üúô ‡≠®
        o * -(Rep)("‡ß¥", ".ToArray()"),   // ‡ß¥  ‡≠™ üù†
        -‚å¢ Rep("„Äê", "(this,", px: "xargs") * B("„Äê$0)"),

        // NUnit ====================================================

        H("NUnit")
        +
        m * ‚å¢ Rep("ÿü", "[Test] public void", px: "test"),
        m * ‚å¢ Rep("‚çú", "[SetUp] public void", px: "setup"),
        m * ‚å¢ Rep("‚çâ", "[TearDown] public void", px: "teardown"),
        -(Rep)("‡≤†·¥ó‡≤†", "Assert.Throws") * B("‡≤†·¥ó‡≤†<$1>( ‚éö $0 );"),

        // Unity ====================================================

        H("Unity")
        +
        p * -‚å¢ Rep("„É≠", "GameObject", Œπ: ‚úì),  // ‚ó∞
        p * -(Rep)("‚´ô", "Component", alt: "m"),
        // Vectors
        p * -(Rep)("„Ç®", "Transform"),  // ñº≤ ‚üÅ ‚ä∫ ‚èß ‚©Ä ‚Åú „Åø „Çµ
        p * -(Rep)("„Éö", "Quaternion"),
        p * -‚å¢ Rep("„Éï", "Vector2", px: "v2"),
        p * -(Rep)("„Ç∑", "Vector3"),
        p * -‚å¢ Rep("„Çø", "Vector4", px: "v4"),
        // Points
        p * -‚å¢ Rep("„Éà", "Vector2", name: "Point2", px: "p2"),
        p * -‚å¢ Rep("„É°", "Vector3", name: "Point3"),
        p * -‚å¢ Rep("„É°ÃÇ", "Vector4", name: "Point4", px: "p4"),
        // Idioms
        -‚å¢ Rep("„Ää", "gameObject.AddComponent<", œÄ: ‚úó,
              name: "AddComponent", px: "AddComponent") * B("„Ää$0„Äã"),
        -‚å¢ Rep("„Äã", ">()", œÄ: ‚úó, ns: ‚úì),
        -‚å¢ Rep("‚ßº", "GetComponent<", œÄ: ‚úó, alt: "<",
              name: "GetComponent", px: "GetComponent") * B("‚ßº$0‚ßΩ"),
        -‚å¢ Rep("‚ßΩ", ">()", œÄ: ‚úó, ns: ‚úì),
        m * ‚å¢ Rep("‚èö","[UnityTest] public IEnumerator", alt: "‚Üì",
                                                       px: "utest"),
        k * ‚å¢ Rep("‚è∞","yield return new WaitForSeconds",
                                          alt: "‚çâ", px: "yieldsec"),
        // Active Logic =============================================

        H("Active Logic")
        +
        p * ("‚ëÇ", "status"),
        p * ("‚ñ∑", "public action"),
        p * ("‚ñ∂", "private action"),
        s * -(Rep)("‚óá", "done()"),
        s * -(Rep)("‚ò°", "cont()"),
        s * -(Rep)("‚ñ†", "fail()"),
        k * -(Rep)("‚åΩ", "return @void();")

        // ==========================================================

    };

}}
