⊐ System.Collections.Generic; ⊐ System;
⊐ UnityEditor; ⊐ UnityEngine; ⊐ ADB = UnityEditor.AssetDatabase;
⊐ S = Active.Howl.UIStrings;

// TODO honor allowExport, allowImport
⊓ Active.Howl{ ‒ ○ ContextMenu{

    [MenuItem(S.ApplySymset, ✗, 0)]
    ∘ ┈ ApplySymset ⎚ Do(Howl.ReimportFile, "Updating", ".howl");

    [MenuItem(S.UseHowl, ✗, 0)]
    ∘ ┈ UseHowl ⎚ Do(Howl.ImportFile, "Importing", ".cs");

    [MenuItem(S.UseCSharp, ✗, 0)]
    ∘ ┈ UseCs ⎚ Do(Howl.ExportFile, "Exporting", ".howl");

    // Validators ---------------------------------------------------

    [MenuItem(S.ApplySymset, ✓), MenuItem(S.UseCSharp, ✓)]
    ∘ ㅇ IsHowlFileAction ⎚ ValidateSel(".howl");

    [MenuItem(S.UseHowl, ✓)]
    ∘ ㅇ IsCsFileAction ⎚ ValidateSel(".cs");

    // --------------------------------------------------------------

    ∘ ┈ Do(⒜<ㄹ> α, ㄹ verb, ㄹ fileType){
        ∙ Λ = Sel(fileType); ᆞ N = Λ⁝;
        ⤴ (N ☰ 0) Debug.Log($"No input");
        ⤳ (N ☰ 1) Debug.Log($"{verb} {Λ[0].FileName()}");
        ⤵         Debug.Log($"{verb} {N} files");
        Λ.ForEach(α);
        AssetDatabase.Refresh();
    }

    ∘ ㅇ ValidateSel(ㄹ ext){
        ∙ Λ = Sel(ext);  ⤴ (Λ⁝ ☰ 0)             ⮐ ✗;
        ∀ (∙ x ∈ Λ)      ⤴ (x.∋(Path.buildRoot)) ⮐ ✗;
        ⮐ ✓;
    }

    ∘ 𝕃<ㄹ> Sel(ㄹ ext) → Selection.assetGUIDs.GUIDsToPaths(ext);

}}
