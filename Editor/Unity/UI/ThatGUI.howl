⊐ System;
⊐ App = UnityEngine.Application;
⊐ UnityEngine; ⊐ UnityEditor; ⊐̥ UnityEngine.GUILayout;
⊐̥ UnityEngine.Color; ⊐̥ UnityEditor.EditorStyles;
⊐ EGL = UnityEditor.EditorGUILayout; ⊐ UGUI = UnityEngine.GUI;
⊐ EGU = UnityEditor.EditorGUIUtility;
⊐ C = Active.Howl.Config; ⊐ S = Active.Howl.UIStrings;
⊐̥ Active.Howl.UI.Widgets;

⊓ That{ ‒̥ ○ GUI{

    ∘ Color lightGray = Color.white * 0.5f;

    // TODO migrate
    ᴸ ㄹ AssetStore = "https://assetstore.unity.com/packages";

    ‒̥ ㅇ flex{ ╭{ FlexibleSpace(); ㆑ } }

    ‒̥ ㅇ A(ㄹ label, ㄹ url, ᆞ width = -1){
        ㅇ ㄸ = width < 0 ? Button(label) : Button(label, Width(width));
        ⤴ (ㄸ){ App.OpenURL(url); ㆑ }
        ⤵ ⤬
    }

    ‒̥ ㅇ B(ㄹ label, ⒜ X = ∅){
        ⤴ (Button(label)){ ⤴(X ≠ ∅) X(); ㆑ }
        ⤵ ⤬
    }

    ‒̥ ㅇ Badge(ㄹ label, ㄹ ㄸ, ᆞ w=24, Color? bg = ∅, Color? fg = ∅){
        ∙ oldbg = UGUI.backgroundColor;
        ∙ style = ⌢ GUIStyle(UGUI.skin.button);
        style.normal.textColor = fg ?? Color.black;
        UGUI.backgroundColor = bg ?? Color.white;
        ㅇ ㅂ = w > 0 ? Button(label, style, Width(24))
                     : Button(label, style);
        ⤴(ㅂ) Application.OpenURL(ㄸ);
        UGUI.backgroundColor = oldbg;
        ㆑
    }

    ‒̥ ㅇ Br(ᆞ space=8){ GUILayout.Space(space); ㆑ }

    ‒̥ ㅇ P(ㄹ label, GUIStyle style=∅, ⋯ GUILayoutOption[] opt){
        ⤴ (style ≠ ∅) Label(label, style, opt);
        ⤵ Label(label, opt);
        ㆑
    }

    ‒̥ Scope H
       { ╭{ BeginHorizontal(); ⮐ (x) → { EndHorizontal(); ㆑ }; } }

    ‒̥ ㅇ Hd(ㄹ s, ᆞ top = 8, ᆞ bottom = 4){
        ⤴ (s ☰ ∅) ㆑
        Space(top);
        ⤴ (s ☰ "Active Logic") LinkToAL(s);
        ⤵ Label(s, boldLabel);
        Space(bottom);
        ㆑
    }

    ‒̥ ㅇ Hr(ᆞ w = 2, ᆞ padding = 10, ᆞ count = 1){
        ⟳ (ᆞ i = 0; i < count; i++){
            ∙ r = EGL.GetControlRect(Height(padding + w));
            r.height = w; r.x -= 2; r.width += 6; r.y += padding/2;
            EditorGUI.DrawRect(r, lightGray);
        } ㆑
    }

    // TODO migrate
    ‒̥ ┈ LinkToAL(ㄹ header){
        BeginHorizontal();
        BeginVertical();
        Label(header, boldLabel);
        Label("Behavior Tree Library for C# 7",
              miniLabel);
        EndVertical();
        FlexibleSpace();
        Badge("GET!",
              $"{AssetStore}/tools/ai/active-logic-151850", -1);
        EndHorizontal();
    }

    ‒̥ ㅇ Tg(ㄹ label, ref ㅇ property)
       { property = Toggle(property, label); ㆑ }

    ‒̥ ㅇ Tg(ㄹ label, ⒜<ㅇ> Setter, ⒡<ㅇ> Getter)
       { Setter( Toggle(Getter(), label)); ㆑ }

    ‒̥ Scope V{╭{ BeginVertical(); ⮐ (x) → { EndVertical(); ㆑ }; }}

    ‒̥ EditorWindow W<T>(ㄹ title) ¿ T : EditorWindow
       → EditorWindow.GetWindow<T>(title: title);

    // ---------------------------------------------------------------

    ‒̥ whenGate when(ㅇ cond){
        EditorGUI.BeginDisabledGroup(!cond);
        ⮐ ⌢ whenGate();
    }

    // Implementation ================================================

    ‒ 𐋆 ㅇ Scope(⋯  ⊡[] args);

    ‒ readonly ⊟ whenGate{
        ‒ ㅇ ⦿[⋯ ⊡[] λ]{
            ╭{ EditorGUI.EndDisabledGroup(); ㆑ }
        }
    }

}}
