⊐ System.IO;
⊐ UnityEditor; ⊐ UnityEngine; ⊐ ADB = UnityEditor.AssetDatabase;
⊐ NUnit.Framework;
⊐ Active.Howl; ⊐ HowlPath = Active.Howl.Path;

⊓ Functional{
    /*
‒ ○ FileOpsFu : TestBase{

    ∘ ㄹ _root; ㅇ _didAllowExport, _postProcVerbose, _postProcWarn;

    ㄹ root → _root ?? (_root = HowlPath.howlRoot.NoFinalSep());

   // --------------------------------------------------------------

    ⍜ Setup(){
        _postProcVerbose = PostProcessor.verbose;
        _postProcWarn    = PostProcessor.warn;
        _didAllowExport = Config.ι.allowExport;
        PostProcessor.verbose = ✗;
        PostProcessor.warn = ✗;
    }

    ⍉ Teardown(){
        PostProcessor.verbose = _postProcVerbose;
        PostProcessor.warn    = _postProcWarn;
        Config.ι.allowExport  = _didAllowExport;
        Active.Howl.Path._Cs = ".cs";
    }

    // --------------------------------------------------------------

    ؟ DeleteHowlFile([Values(✗, ✓)] ㅇ allowExport,
                     [Values(✗, ✓)] ㅇ withCounterpart){
        Config.ι.allowExport = allowExport;
        ㄹ ㅂ = $"{root}/Test.howl", ㄸ = "Assets/Test.cs";
        ⤴(!Setup(✓, withCounterpart)) ⮐;
        //
        ADB.DeleteAsset(ㅂ);
        // After this op, the condition for the C# file to exist
        // - did exist in the first place
        // - export was disabled (or it should be deleted)
        o(File.Exists(ㄸ), withCounterpart ∧ !allowExport);
    }

    ؟ MoveHowlFile([Values(✗, ✓)] ㅇ allowExport,
                   [Values(✗, ✓)] ㅇ withCounterpart){
        Config.ι.allowExport = allowExport;
        ModificationProcessor.warnings = ✗;
        // Actual .cs extension would "trigger" the C# compiler
        Active.Howl.Path._Cs = ".xyz";
        ㄹ ㅂ1 = $"{root}/Test.howl",
           ㅂ2 = $"{root}/Howl/Test.howl",
          ㄸ1 = "Assets/Test.xyz",
           ㄸ2 = "Assets/Howl/Test.xyz";
        CreateViaADB(ㅂ1, withCounterpart ? ㄸ1 : ∅);
        if(!withCounterpart) ㄸ1.Delete();
        if(withCounterpart ∧ !ㄸ1.Exists()){
            Debug.LgWarning("Test setup failed");
            return;
        }
        ADB.MoveAsset(ㅂ1, ㅂ2);
        ㅇ e1 = File.Exists(ㄸ1),
           e2 = File.Exists(ㄸ2);
        DeleteAll(ㅂ1, ㅂ2, ㄸ1, ㄸ2);
        //Debug.Lg($"{ㄸ1}.exists? {e1}");
        //Debug.Lg($"{ㄸ2}.exists? {e2}");
        o(e1, withCounterpart ∧ !allowExport);
        // Moving files and dirs does not create counterparts
        o(e2, allowExport ∧ withCounterpart);
        ModificationProcessor.warnings = ✓;
    }

    // From without "Howl" root to within; then, export a C# file
    ؟ Welcome_Howl([Values(✗, ✓)] ㅇ allowExport){
        Config.ι.allowExport = allowExport;
        Howl.warnings = ✗;
        // Actual .cs extension would "trigger" the C# compiler
        Active.Howl.Path._Cs = ".xyz";
        ㄹ ㅂ1 = "Assets/Test.howl",
           ㅂ2 = $"{root}/Test.howl",
          ㄸ1 = ∅,
           ㄸ2 = "Assets/Test.xyz";
        CreateViaADB(ㅂ1);
        ADB.MoveAsset(ㅂ1, ㅂ2);
        ㅇ e2 = File.Exists(ㄸ2);
        DeleteAll(ㅂ1, ㅂ2, ㄸ1, ㄸ2);
        o(e2, allowExport);
        Active.Howl.Path._Cs = ".cs";
        Howl.warnings = ✓;
    }

    // Remove a howl from the root; then, delete the matching C# file
    ؟ Exile_Howl([Values(✗, ✓)] ㅇ allowExport,
                 [Values(✗, ✓)] ㅇ withCounterpart){
        Config.ι.allowExport = allowExport;
        ModificationProcessor.warnings = ✗;
        Howl.warnings = ✗;
        // Actual .cs extension would "trigger" the C# compiler
        Active.Howl.Path._Cs = ".xyz";
        ㄹ ㅂ1 = $"{root}/Test.howl",
           ㅂ2 = "Assets/Test.howl",
           ㄸ1 = "Assets/Test.xyz",
           ㄸ2 = ∅;
        CreateViaADB(ㅂ1, withCounterpart ? ㄸ1 : ∅);
        ADB.MoveAsset(ㅂ1, ㅂ2);
        ㅇ e1 = File.Exists(ㄸ1);
        DeleteAll(ㅂ1, ㅂ2, ㄸ1, ㄸ2);
        // The condition for a C# counterpart to remain:
        // - Did exist in the first place.
        // - Export is disabled (or it would have been deleted)
        o(e1, withCounterpart ∧ !allowExport);
        Active.Howl.Path._Cs = ".cs";
        Howl.warnings = ✓;
    }

    // --------------------------------------------------------------

    ㅇ Setup(ㅇ howlFile, ㅇ csFile){
        ㄹ @in = $"{root}/Test.howl";
        ㄹ @out = "Assets/Test.cs";
        ⮐ Setup(@in, howlFile) ∧ Setup(@out, csFile);
    }

    ㅇ Setup(ㄹ fname, ㅇ e){
        ⤴(e ∧ File.Exists(fname)) ⮐ ✓;
        ⤴(!e ∧ !File.Exists(fname)) ⮐ ✓;
        //
        ⤴(e) CreateViaADB(fname);
        ⤴(!e) ADB.DeleteAsset(fname);
        //
        ⤴(e ∧ !File.Exists(fname)){
          Debug.Lg($"Setup failed: {fname} was not created");
          ⮐ ✗;
        }
        ⤴(!e ∧ File.Exists(fname)){
          Debug.Lg($"Setup failed: {fname} was not deleted");
          ⮐ ✗;
        }
        ⮐ ✓;
    }

    ┈ CreateViaADB(params ㄹ[] π){
        ∀(∙ x ∈ π) ⤴(x ≠ ∅)
            ADB.CreateAsset(⌢ TextAsset(), x);
    }

    ┈ Create(params ㄹ[] π){
        ∀(∙ x ∈ π) ⤴(x ≠ ∅) File.WriteAllText(x, "");
    }

    ┈ DeleteAll(params ㄹ[] π){
        ∀(∙ x ∈ π) ⤴(x ≠ ∅) ADB.DeleteAsset(x);
    }

}*/
}
